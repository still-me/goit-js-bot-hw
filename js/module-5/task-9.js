//* constructor

/* Конструктор класса
При вызове с оператором new, функция-конструктор добавляет свойства на создаваемый объект.

!function User({ name, email }) {
!  this.name = name;
!  this.email = email;
!}
Для инициализации экземпляра в классе есть метод constructor. 
Если он не объявлен, создаётся конструктор по умолчанию - пустая функция, которая не изменяет экземпляр.

!class User {
?  // Необязательное объявление публичных свойств
!  name;
!  email;

?   // Аналог функции-конструктора
!  constructor({ name, email }) {
?   // Инициализация объявленных свойств
!    this.name = name;
!    this.email = email;
!  }
!}

!const mango = new User({ name: 'Манго', email: 'mango@mail.com' });
Свойства name и email называются публичные свойства, потому что они будут собственными свойствами объекта-экземпляра и к ним можно будет получить доступ обратившись через точку.

Объявлять публичные свойства в теле класса до конструктора необязательно, но это может повысить читабельность, так как код внутри конструктора может быть довольно громоздким и визуально выделить набор свойств класса будет затруднительно. */

class Car {

constructor({ brand, model, price }) {
this.brand = brand;
this.model = model;
this.price = price;
}   
}
  
console.table(new Car({ brand: 'Audi', model: 'Q3', price: 36000 }));
