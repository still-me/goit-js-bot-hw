/* Тернарный оператор
Тернарный оператор используется как более синтаксически краткая замена инструкции if...else, когда одной и той же переменной необходимо присвоить разные значения по условию.

!<условие> ? <выражение если условие истинно> : <выражение если условие ложно>
Работает по такой схеме:

Вычисляется условие.
Если условие истинно, то есть приводится к true, вычисляется выражение после ?.
Если условие ложно, то есть приводится к false, вычисляется выражение после :.
Значение вычисленного выражения возвращается как результат работы тернарного оператора.
!let type;
!const age = 20;
!
!if (age >= 18) {
!  type = 'adult';
!} else {
!  type = 'child';
!}
!
!console.log(type); // 'adult'

Выполним рефакторинг, заменив if...else тернарным оператором.

!const age = 20;
!const type = age >= 18 ? 'adult' : 'child';
!console.log(type); // 'adult'
?Внимание
?Тернарный оператор должен использоваться в простых операциях присваивания или возврата. Применять его для замены сложных ветвлений — плохая практика (антипаттерн). 
 */

function checkStorage(available, ordered) {
  let message;
  // Пиши код ниже этой строки

message = ordered > available ? 'На складе недостаточно товаров!' : 'Заказ оформлен, с вами свяжется менеджер';
  // Пиши код выше этой строки
  return message;
}

console.log(checkStorage(100, 50));
